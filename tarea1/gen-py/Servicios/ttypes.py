#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport
all_structs = []


class Venta(object):
    """
    Attributes:
     - cod_producto
     - producto
     - cod_venta
     - ced_cliente
     - nombre_cliente
     - fecha_venta
     - tipo_garantia
     - tiempo_garantia
     - valor_venta
     - tipo_tienda
     - ciudad_sede
     - sede
     - entrega
     - vendedor
     - calificacion_servicio
     - comentario_servicio

    """
    thrift_spec = None


    def __init__(self, cod_producto = None, producto = None, cod_venta = None, ced_cliente = None, nombre_cliente = None, fecha_venta = None, tipo_garantia = None, tiempo_garantia = None, valor_venta = None, tipo_tienda = None, ciudad_sede = None, sede = None, entrega = None, vendedor = None, calificacion_servicio = None, comentario_servicio = None,):
        self.cod_producto = cod_producto
        self.producto = producto
        self.cod_venta = cod_venta
        self.ced_cliente = ced_cliente
        self.nombre_cliente = nombre_cliente
        self.fecha_venta = fecha_venta
        self.tipo_garantia = tipo_garantia
        self.tiempo_garantia = tiempo_garantia
        self.valor_venta = valor_venta
        self.tipo_tienda = tipo_tienda
        self.ciudad_sede = ciudad_sede
        self.sede = sede
        self.entrega = entrega
        self.vendedor = vendedor
        self.calificacion_servicio = calificacion_servicio
        self.comentario_servicio = comentario_servicio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cod_producto = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.producto = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cod_venta = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ced_cliente = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nombre_cliente = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.fecha_venta = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.tipo_garantia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.tiempo_garantia = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.valor_venta = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.tipo_tienda = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.ciudad_sede = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.sede = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.entrega = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.vendedor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.calificacion_servicio = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.comentario_servicio = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Venta')
        if self.cod_producto is not None:
            oprot.writeFieldBegin('cod_producto', TType.STRING, 1)
            oprot.writeString(self.cod_producto.encode('utf-8') if sys.version_info[0] == 2 else self.cod_producto)
            oprot.writeFieldEnd()
        if self.producto is not None:
            oprot.writeFieldBegin('producto', TType.STRING, 2)
            oprot.writeString(self.producto.encode('utf-8') if sys.version_info[0] == 2 else self.producto)
            oprot.writeFieldEnd()
        if self.cod_venta is not None:
            oprot.writeFieldBegin('cod_venta', TType.STRING, 3)
            oprot.writeString(self.cod_venta.encode('utf-8') if sys.version_info[0] == 2 else self.cod_venta)
            oprot.writeFieldEnd()
        if self.ced_cliente is not None:
            oprot.writeFieldBegin('ced_cliente', TType.STRING, 4)
            oprot.writeString(self.ced_cliente.encode('utf-8') if sys.version_info[0] == 2 else self.ced_cliente)
            oprot.writeFieldEnd()
        if self.nombre_cliente is not None:
            oprot.writeFieldBegin('nombre_cliente', TType.STRING, 5)
            oprot.writeString(self.nombre_cliente.encode('utf-8') if sys.version_info[0] == 2 else self.nombre_cliente)
            oprot.writeFieldEnd()
        if self.fecha_venta is not None:
            oprot.writeFieldBegin('fecha_venta', TType.STRING, 6)
            oprot.writeString(self.fecha_venta.encode('utf-8') if sys.version_info[0] == 2 else self.fecha_venta)
            oprot.writeFieldEnd()
        if self.tipo_garantia is not None:
            oprot.writeFieldBegin('tipo_garantia', TType.STRING, 7)
            oprot.writeString(self.tipo_garantia.encode('utf-8') if sys.version_info[0] == 2 else self.tipo_garantia)
            oprot.writeFieldEnd()
        if self.tiempo_garantia is not None:
            oprot.writeFieldBegin('tiempo_garantia', TType.I32, 8)
            oprot.writeI32(self.tiempo_garantia)
            oprot.writeFieldEnd()
        if self.valor_venta is not None:
            oprot.writeFieldBegin('valor_venta', TType.I32, 9)
            oprot.writeI32(self.valor_venta)
            oprot.writeFieldEnd()
        if self.tipo_tienda is not None:
            oprot.writeFieldBegin('tipo_tienda', TType.STRING, 10)
            oprot.writeString(self.tipo_tienda.encode('utf-8') if sys.version_info[0] == 2 else self.tipo_tienda)
            oprot.writeFieldEnd()
        if self.ciudad_sede is not None:
            oprot.writeFieldBegin('ciudad_sede', TType.STRING, 11)
            oprot.writeString(self.ciudad_sede.encode('utf-8') if sys.version_info[0] == 2 else self.ciudad_sede)
            oprot.writeFieldEnd()
        if self.sede is not None:
            oprot.writeFieldBegin('sede', TType.STRING, 12)
            oprot.writeString(self.sede.encode('utf-8') if sys.version_info[0] == 2 else self.sede)
            oprot.writeFieldEnd()
        if self.entrega is not None:
            oprot.writeFieldBegin('entrega', TType.STRING, 13)
            oprot.writeString(self.entrega.encode('utf-8') if sys.version_info[0] == 2 else self.entrega)
            oprot.writeFieldEnd()
        if self.vendedor is not None:
            oprot.writeFieldBegin('vendedor', TType.STRING, 14)
            oprot.writeString(self.vendedor.encode('utf-8') if sys.version_info[0] == 2 else self.vendedor)
            oprot.writeFieldEnd()
        if self.calificacion_servicio is not None:
            oprot.writeFieldBegin('calificacion_servicio', TType.I32, 15)
            oprot.writeI32(self.calificacion_servicio)
            oprot.writeFieldEnd()
        if self.comentario_servicio is not None:
            oprot.writeFieldBegin('comentario_servicio', TType.STRING, 16)
            oprot.writeString(self.comentario_servicio.encode('utf-8') if sys.version_info[0] == 2 else self.comentario_servicio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Garantia(object):
    """
    Attributes:
     - cod_venta
     - fecha_compra
     - tipo_garantia
     - tiempo_garantia
     - calificacion
     - comentarios
     - detalle_garantia

    """
    thrift_spec = None


    def __init__(self, cod_venta = None, fecha_compra = None, tipo_garantia = None, tiempo_garantia = None, calificacion = None, comentarios = None, detalle_garantia = None,):
        self.cod_venta = cod_venta
        self.fecha_compra = fecha_compra
        self.tipo_garantia = tipo_garantia
        self.tiempo_garantia = tiempo_garantia
        self.calificacion = calificacion
        self.comentarios = comentarios
        self.detalle_garantia = detalle_garantia

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cod_venta = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.fecha_compra = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tipo_garantia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tiempo_garantia = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.calificacion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.comentarios = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.detalle_garantia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Garantia')
        if self.cod_venta is not None:
            oprot.writeFieldBegin('cod_venta', TType.STRING, 1)
            oprot.writeString(self.cod_venta.encode('utf-8') if sys.version_info[0] == 2 else self.cod_venta)
            oprot.writeFieldEnd()
        if self.fecha_compra is not None:
            oprot.writeFieldBegin('fecha_compra', TType.STRING, 2)
            oprot.writeString(self.fecha_compra.encode('utf-8') if sys.version_info[0] == 2 else self.fecha_compra)
            oprot.writeFieldEnd()
        if self.tipo_garantia is not None:
            oprot.writeFieldBegin('tipo_garantia', TType.STRING, 3)
            oprot.writeString(self.tipo_garantia.encode('utf-8') if sys.version_info[0] == 2 else self.tipo_garantia)
            oprot.writeFieldEnd()
        if self.tiempo_garantia is not None:
            oprot.writeFieldBegin('tiempo_garantia', TType.I32, 4)
            oprot.writeI32(self.tiempo_garantia)
            oprot.writeFieldEnd()
        if self.calificacion is not None:
            oprot.writeFieldBegin('calificacion', TType.I32, 5)
            oprot.writeI32(self.calificacion)
            oprot.writeFieldEnd()
        if self.comentarios is not None:
            oprot.writeFieldBegin('comentarios', TType.STRING, 6)
            oprot.writeString(self.comentarios.encode('utf-8') if sys.version_info[0] == 2 else self.comentarios)
            oprot.writeFieldEnd()
        if self.detalle_garantia is not None:
            oprot.writeFieldBegin('detalle_garantia', TType.STRING, 7)
            oprot.writeString(self.detalle_garantia.encode('utf-8') if sys.version_info[0] == 2 else self.detalle_garantia)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Venta)
Venta.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cod_producto', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'producto', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cod_venta', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ced_cliente', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nombre_cliente', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'fecha_venta', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'tipo_garantia', 'UTF8', None, ),  # 7
    (8, TType.I32, 'tiempo_garantia', None, None, ),  # 8
    (9, TType.I32, 'valor_venta', None, None, ),  # 9
    (10, TType.STRING, 'tipo_tienda', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'ciudad_sede', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'sede', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'entrega', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'vendedor', 'UTF8', None, ),  # 14
    (15, TType.I32, 'calificacion_servicio', None, None, ),  # 15
    (16, TType.STRING, 'comentario_servicio', 'UTF8', None, ),  # 16
)
all_structs.append(Garantia)
Garantia.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cod_venta', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'fecha_compra', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tipo_garantia', 'UTF8', None, ),  # 3
    (4, TType.I32, 'tiempo_garantia', None, None, ),  # 4
    (5, TType.I32, 'calificacion', None, None, ),  # 5
    (6, TType.STRING, 'comentarios', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'detalle_garantia', 'UTF8', None, ),  # 7
)
fix_spec(all_structs)
del all_structs
